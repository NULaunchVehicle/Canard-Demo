
/* Please change and upgrade the code and components as necessary for your specific design requirements. */
/* Not meant to be flown without necessary modifications. */
/* Use at your  own risk. */

/* Northwestern University Space Technology and Rocketry Society (NUSTARS) */

/* 5/9/2020 - Arduino IDE 1.8.12  */
/* Board: Arduino Nano (NANO V3) found in Tools => Board => Arduino Nano */
/* Processor: ATmega328P (Old Bootloader) found in Tools => Processor => ATmega328P (Old Bootloader) */


#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <Servo.h>
#include <LiquidCrystal.h>

/* Make sure to install the libraries you don't have above using Sketch => Include Library => Manage Libraries */


/* Creates servo object to control servo */
Servo myservo;

/* Defines which microcontroller pins go to which Liquid Crystal Display (LCD) pins */
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;

/* Creates LCD object, then assigns it the pins defined above */
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

/* Sets the delay between fresh samples for he BNO055 */
#define BNO055_SAMPLERATE_DELAY_MS (50)

/* Check your I2C device address and correct line below (by default address is 0x29 or 0x28) */
/*                                   id, address */
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);

/**************************************************************************/
/*
    Displays some basic information about this sensor.
*/
/**************************************************************************/
void displaySensorDetails(void)
{
  sensor_t sensor;
  bno.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

/**************************************************************************/
/*
    Display some basic information about the sensor status
*/
/**************************************************************************/
void displaySensorStatus(void)
{
  /* Gets the system status values (mostly for debugging purposes) */
  uint8_t system_status, self_test_results, system_error;
  system_status = self_test_results = system_error = 0;
  bno.getSystemStatus(&system_status, &self_test_results, &system_error);

  /* Displays the results in the serial monitor */
  Serial.println("");
  Serial.print("System Status: 0x");
  Serial.println(system_status, HEX);
  Serial.print("Self Test:     0x");
  Serial.println(self_test_results, HEX);
  Serial.print("System Error:  0x");
  Serial.println(system_error, HEX);
  Serial.println("");
  delay(500);
}

/**************************************************************************/
/*
    Displays sensor calibration status
*/
/**************************************************************************/
void displayCalStatus(void)
{
  /* Gets the four calibration values (0..3) */
  /* Any sensor data reporting 0 should be ignored */
  /* A value of 3 means 'fully calibrated" */
  uint8_t system, gyro, accel, mag;
  system = gyro = accel = mag = 0;
  bno.getCalibration(&system, &gyro, &accel, &mag);

  /* The data should be ignored until the system calibration is > 0 */
  Serial.print("\t");
  if (!system)
  {
    Serial.print("! ");
  }

  /* Displays the individual calibration values */
  Serial.print("Sys:");
  Serial.print(system, DEC);
  Serial.print(" G:");
  Serial.print(gyro, DEC);
  Serial.print(" A:");
  Serial.print(accel, DEC);
  Serial.print(" M:");
  Serial.print(mag, DEC);
}

/**************************************************************************/
/*
    Arduino setup function (automatically called at startup)
    Establishes intial parameters
*/
/**************************************************************************/

void setup(void)
{

  /* Sets up the LCD's number of columns and rows */
  lcd.begin(16, 2);

  /* Prints a message to the LCD */
  /* This is the value that will vary to actuate your canard */
  lcd.print("Y Orientation");

  /* Assigns servo signal to pin 9 */
  myservo.attach(9);

  /* Initializes the serial monitor at 115200 baud rate */
  Serial.begin(115200);

  /* Prints message to serial monitor */
  Serial.println("Canard Sensor Test");

  /* Skips a line in the serial monitor */
  Serial.println("");


  /* Initialises the BNO055 sensor */
  if (!bno.begin())
  {
    /* Prints to serial monitor if there was a problem detecting the BNO055. Check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while (1);
  }

  /* Waits for 1000ms (1 second) */
  delay(1000);

  /* Display some basic information on this sensor */
  displaySensorDetails();

  /* Optional: Display current status */
  displaySensorStatus();

  bno.setExtCrystalUse(true);
}

/**************************************************************************/
/*
    Arduino loop function that updates continuously
    The loop starts once 'setup' is complete
    Your own code goes here
*/
/**************************************************************************/

void loop(void)
{
  /* Gets new sensor event from the BNO055 */
  sensors_event_t event;
  bno.getEvent(&event);

  /* Displays the floating point data in the serial monitor */
  Serial.print("X: ");
  Serial.print(event.orientation.x,4);
  Serial.print("\tY: ");
  Serial.print(event.orientation.y,4);
  Serial.print("\tZ: ");
  Serial.print(event.orientation.z,4);

  /* Display calibration status */
  displayCalStatus();

  /* Creates a new line for the next sample */
  Serial.println("");

  /* Sets the cursor to column 0, line 1 */
  /* (note: line 1 is the second row, since counting begins with 0): */
  lcd.setCursor(0, 1);

  /* print the y angle output from the Adafruit_BNO055 on the LCD display */
  lcd.print(event.orientation.y);

  /* Tells servo to go to position in variable 'event.orientation.y', then add 73 degrees to make '0' position vertical */
  /* The add 73 degrees number depends on your servo, servo horn alignment, etc. Tune as necessary. */
  myservo.write(event.orientation.y + 73);

  /* Wait the specified delay before requesting new data (starting loop over) */
  delay(BNO055_SAMPLERATE_DELAY_MS);

}
